import re
import pandas as pd
import os
import matplotlib.pyplot as plt
import pyprind


def img_read(path):
    """
    Reads a directory of images generated by CPMG plotting functions 
    and returns a series indexed by resnum with image info (ndarray) 
    as values.
    INPUTS:
    path:  The relative path to the directory with all the
           the images.
    """
    
    names = list()
    objects = list()
    for f in os.listdir(path):
        if 'png' in f:
            names.append(int(re.findall("[0-9]+",f)[0]))
            objects.append(plt.imread(os.path.join(path, f)))
    ser = pd.Series(objects, index=names)
    return ser

def img_dir_read(plot_dir):
    """
    Reads images from subdirectories located in the plot_dir and 
    makes a series for each subdirectory, which is then made into a
    multiindexed pandas dataframe.
    """
    
    #here = os.getcwd()
    ser_list = list()
    dirlist = list()
    dirs = os.listdir(plot_dir)
    bar = pyprind.ProgBar(len(dirs), monitor=True)
    for d in dirs:
        if not d.startswith('.'):
            # Appending a pd.Series to ser_list
            ser_list.append(img_read(os.path.join(plot_dir, d)))
            bar.update()
            dirlist.append(d)
    # Finding all unique res in the zeroith ser_list
    sindex = set(ser_list[0].index.values)
    # Going thru the rest of ser_list to find common res
    for i in range(1, len(ser_list)):
        sindex = sindex & set(ser_list[i].index.values)
    sindex = sorted(list(sindex))
    ser_list = [ser[sindex] for ser in ser_list]
    df = pd.DataFrame(ser_list, index=dirlist)
    return df


def plot_figures(figures, nrows=2, ncols=2, save=False):
    """
    Takes in a pandas series(?) for a given residue containing 
    image data and plots each image in a subplot.  Currently need
    
    """
    
    fig, axeslist = plt.subplots(ncols=ncols, nrows=nrows, figsize = (11, 8.5))
    nfigs = len(figures)
    for col in range(nfigs):
        axeslist.ravel()[col].imshow(figures[col])
        axeslist.ravel()[col].set_axis_off()
    plt.axis('off')
    fig.subplots_adjust(hspace=0, wspace=0, top=.95, bottom=.05, left=0.05, right=.95)


def save_figs(path, df, seq):
    """
    Takes in a series consisting of
    """
    
    
    for col in df.columns:
        plot_figures(df[col], nrows=2, ncols=2);
        plt.title('%s%s' %(col, seq[col-1]), fontsize=20)
        plt.savefig(os.path.join(path, '%s.png' %(col)), type='png', dpi=200)
        plt.close()

